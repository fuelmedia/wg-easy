networks:
  public:
    external: true

services:
  wg-easy:
    container_name: wg-easy
    hostname: wg-easy
    image: ghcr.io/wg-easy/wg-easy:latest
    security_opt: [no-new-privileges]
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-file: 1
        max-size: 10m
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    healthcheck:
      test: /usr/bin/timeout 5s /bin/sh -c "/usr/bin/wg show | /bin/grep -q interface || exit 1"
      interval: 1m
      timeout: 5s
      retries: 3
    networks:
      - public
    volumes:
      - "/mnt/data/wg-easy:/etc/wireguard:rw"
    environment:
      UI_TRAFFIC_STATS: true
      LANG: "en"
      PASSWORD: "Sup3rStr0ngPassw0rd!"
      WG_HOST: "example.tld"
      WG_PRE_UP: 'iptables -t nat -F; iptables -F;'  # Flush all rules
      WG_DEFAULT_ADDRESS: "10.0.0.x"
      WG_DEFAULT_DNS: "192.168.1.200,1.1.1.1,8.8.8.8"
      WG_ALLOWED_IPS: |  # DNS servers should be allowed. You can use "0.0.0.0/0,::/0" instead
        1.1.1.1,8.8.8.8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,fc00::/7
    labels:
      # If not using Traefik, just expose the 51820/udp and 51821/tcp ports
      traefik.enable: true
      # Traefik router for Web UI (middleware used for subpath installation)
      traefik.http.routers.wg-easy.rule: Host(`example.tld`) && PathPrefix(`/vpn/`)
      traefik.http.routers.wg-easy.entrypoints: https  # address: ':443/udp'
      traefik.http.routers.wg-easy.service: wg-easy
      traefik.http.routers.wg-easy.middlewares: wg-easy@docker
      traefik.http.services.wg-easy.loadbalancer.server.port: 51821
      traefik.http.middlewares.wg-easy.stripprefix.prefixes: "/vpn"
      # Traefik router for WireGuard VPN
      traefik.udp.routers.wg-easy.entrypoints: wireguard  # address: ':51820/udp'
      traefik.udp.routers.wg-easy.service: wg-easy
      traefik.udp.services.wg-easy.loadbalancer.server.port: 51820
